* Hoon Notes

** Nouns
Hoon uses nouns, which are atoms (natural numbers) or cells (pairs of nouns, cells can be nested as binary trees)

** Cells

left of a cell is the head, right is the tail
brackets around a pair of nouns

** Auras
atoms can have auras `@`will show the raw value

identities have the @p aura
cords (hoonish strings) have an @t aura
terms have an @tas aura, terms are constants values that tag data

   %a, %hello
*** Non-exhaustive list of auras

Aura         Meaning                        Example of Literal Syntax
-------------------------------------------------------------------------
@d           date
  @da        absolute date                  ~2018.5.14..22.31.46..1435
  @dr        relative date (ie, timespan)   ~h5.m30.s12
@n           nil                            ~
@p           phonemic base (urbit name)     ~sorreg-namtyv
@r           IEEE floating-point
  @rd        double precision  (64 bits)    .~6.02214085774e23
  @rh        half precision (16 bits)       .~~3.14
  @rq        quad precision (128 bits)      .~~~6.02214085774e23
  @rs        single precision (32 bits)     .6.022141e23
@s           signed integer, sign bit low
  @sb        signed binary                  --0b11.1000
  @sd        signed decimal                 --1.000.056
  @sv        signed base32                  -0v1df64.49beg
  @sw        signed base64                  --0wbnC.8haTg
  @sx        signed hexadecimal             -0x5f5.e138
@t           UTF-8 text (cord)              'howdy'
  @ta        ASCII text (knot)              ~.howdy
    @tas     ASCII text symbol (term)       %howdy
@u              unsigned integer
  @ub           unsigned binary             0b11.1000
  @ud           unsigned decimal            1.000.056
  @uv           unsigned base32             0v1df64.49beg
  @uw           unsigned base64             0wbnC.8haTg
  @ux           unsigned hexadecimal        0x5f5.e138

* Useful Dojo commands

provides the base hash of the target
-read %z ~dev %kids da+now /

show login code
+code 

show version and other info
+trouble

clean out subject in dojo
.
then =

* Hooniversity Notes
** Lesson 1 Notes
:: Naked Generators
:: Goal: write a program that takes your planet name and creates a cell fo your planet's number and planet's name

:: |= is a bartis which makes a gate

:: bartis takes a =sample= and has only one =arm=
|= a=@ud
a

:: ^- is ket-hep, returns some hoon code or value, expressed in an explicitly declared type if possible

::@ud = unsigned decimal @p=planet name
::can use ^- to cast data into types
^- [@ud @p] [0 ~zod]

:: :- col hep takes two nouns  to produce a cell
:: a hoon is the idoimatic naming convetion for a series of expressions that terminate back to a value


** Lesson 2 Notes

*** Goal
Write a generator that takes in one piece of information, assigns it a face, and internally creates two other faces and assigns them values based on the first.

*** Review: Gates, Faces, Generators, Arms, Cores

**** Generators
+ Complete functions that can be run from /home/gen in the dojo
+ All generators are arms, not all arms are generators

**** Arms
+ A peice of hoon code
+ could be a core, gate, generator

**** Core
+ battery, payload, something to do

**** Gates
+ subset of cores, a core where battery consists one 1 (and only 1) arm of things to do
+ one arm of a gate has to be a full thought of what to do and then an express of data
+simplest form of cores

**** Faces
+ set value, bunt value, some other arm that resolves to a value
+ hoons equivalent of variables
***** bunt value

*** New Runes

+ a temporary value, emptiest form of the type you have declared, usually 0
+ i.e. bunt of @ud = 0

**** =/ (tis-fas)
+ =/ name=type value hoon
+ combine a named noun to the subject
+ Three children: 1 face given to the noun 2 value of new noun 3 hoon to run

**** =| (tis-bar)
+ =| name=type  hoon
+ combine a default type value with the subject
+ takes 2 children 1 the face and type, 2 some hoon

**** =. (tis-dot)
+ takes a face and assigns it a temporary value that exists only within its own hoon
> =a 2
> =.  a  3
  a
3
> a
2




** Lesson 3 Notes
BIG IFF %y Conditional Operators

*** ?: and ?.
Sister operations

**** ?: wut-col
3 children test hoon if true hoon if false

#+begin_src hoon
  ?:  %.y :: %.y = yes
  "Result True"
  "Result False"
  ::> "Result 1"
#+end_src

#+begin_src hoon
  ?:  %.n :: %.n = no
  "Result True"
  "Result False"
  ::>"Result False"
#+end_src

**** ?. wut-dot

#+begin_src hoon
  ?.  =(1 1)
  "False Result"
  "True Result"
  ::> "True Result"
#+end_src

?. is ?: inverted

*** ?^ wut-ket
wut-ket takes three children (a wing and two branches)
wut-ket branches depending on whether the wing is a cell

*** ?> wut-gar
wut-gar takes two children a test (an assertion) and some hoon
wut-gar crashes if the test is not true or continues

*** .= dot-tis
takes two children (hoons) and returns &.y if they are equal, %.n if not
wideform =(hoon hoon)

**** gth, lth gte, lte

(gte a b) returns %.y if a is greater than or equal to b
(gth a b) returns %.y if a is greater than b
(lth a b) returns %.y if a is less than b
(lte a b) returns %.y if a is less than or equal to b

** Lesson 4 - The Right to Bear Arms
Cores, Gates, Arms, Doors

a Gate is a Core - one arm called $ (buc)
executed right away

in other types of Cores, there are other arms with other names

*** What is a Core?

A core is a cell with a head of =battery= and a tail of =payload=

**** What is a Battery?
Battery is what to do w/the data given to the core (core like reactor core not apple core)

**** What is a payload?
A Cell of =sample= and =context=

=sample= is the inputs coming into the core

=context= the 'operational environment'
+ standard library
+ name of the ship
+ now as a datetime
+ things pinned to the subject
+ etc (Ford runes for libraries and so on)

***** What is the difference between the subject and the context?
It is hard to differentiate them

The context does not have the entirety of the subject.

*** Bar-Ket |^
a core, has one arm called buc
optionally has additional arms that can be used in the evaluation of buc ($)

*** bar-cen |%
creates a core which contains one or more computation methods

*** ++ lus-lus
signals a new arm
call an arm w/armname and arguments
members of the lus family produce arms

*** hep-hep --
signal to end an arm

*** tis-tis ==
closes different types of cores

*** tis-gal =<
=< a=hoon b =hoon
computes a after computing

*** More conditionals
**** wut-sig ?~
conditional based on whether result is null (~)


** Lesson 5 - Sibilance

*** cords and tapes

Both are ways of handling text in hoon

Tapes = "tapes" made of cells
cords = 'cords' atomic

handled very differently by hoon

*** loobeans

=&= is true (pam)
=|= is false (bar)

** Lesson 6 - Measure Counter and Cut Once

*** %= (cen-tis)
cen tis starts a recursion arm for recalling

**** Tall form:
#+begin_src hoon 
  %=  $
  <face1>  <new value>
  <face2>  <new value 2>
  ==
#+end_src

**** Wide form:
#+begin_src hoon
  $(<face1> <new value>, <face2> <new value>)
 #+end_src

*** |- (bar-hep)

produces a trap, which is a core. It's like a gate but takes no sample

** Lesson 7 - a four point buc

*** %- (Cen-hep)

another rune that can be used to build recursive cores

*** %= (Cen-tis)
takes a wing and resolves it with changes
#+begin_src hoon
%=  $

  a  +(a)

  b  (add a b)

  output  :-([a b] output)

  cycle  (dec cycle)

==
#+end_src
these all happen simultaneously, not sequentially. i.e. b will be modified with the original value of a, not the incremented value from the line above.


*** Lists

a collection of cells of atoms that ends with ~ (null)

*** Flop

a builtin library function that flips a list


#+begin_src hoon
> =four [0 1 2 3 ~]
> `(list @p)`four
> nest fail
#+end_src

#+begin_src hoon
> =four [0 1 2 3 ~]
> `(list @p)``(list @)`four
> ~[~zod ~nec ~bud ~wes]
#+end_src

#+begin_src hoon
> =four `(list @)`[0 1 2 3 ~]
> `(list @p)`four
> ~[~zod ~nec ~bud ~wes]
#+end_src


This is because of what the compiler knows about the data structure of the list. The cast of @p doesn't know it is dealing with a list.

*** typing with faces
#+begin_src hoon
=a [b="hello" c="dasdus"]
b.a
"hello"
c.a
"dascus"
-.a
b="hello"
+.a
c="dasdus"
(flop c.a)
"sudsad"
(flop `tape`+.a)
#+end_src

faces are part of the type system
cast early, cast often to keep the compiler informed
** Lesson 9 - Maps

*** Maps

+ Kind of like dictionaries in other languages
+ Key-Value pairs

*** %~ (cen-sig)
+ doors have a built in sample
+ gates have a user supplied sample
+ %~ can interact with the arms of the door

**** |_ (bar-cab)

#+begin_src hoon
  > > =tester |_  builtin=_"this is a tape"
    ++  flopper  (flop builtin)
    --
  > flopper.tester
  "epat a si siht"
#+end_src

%~ says give me an arm, a door, and a new value
+ does not remove the old value
#+begin_src hoon 
  > %~  flopper  tester  "not the old tape"
  "epat dlo eht ton"
#+end_src

*** %- (cen-hep)
+ call a gate against some arguments

#+begin_src hoon
 > =tester |=(a=tape (flop a))
> %-  tester
  "mutant tape stylie"
"eilyts epat tnatum"
#+end_src


